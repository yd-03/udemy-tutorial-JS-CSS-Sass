@use "mixin" as *;

.try {
  /** ここに記述しよう */
  .spinner {
    width: 40px;
    height: 40px;
    background-color: black;

    margin: 100px auto;

    @include animation(
      $name: sk-rotateplane-2,
      // アニメーション名
      $duration: 1.2s,
      // アニメーションの持続時間
      $iteration-count: infinite,
      // アニメーションの繰り返し回数
      $timing-function: ease-in-out // アニメーションのタイミング関数
    );
  }

  @keyframes sk-rotateplane-2 {
    0% {
      transform: perspective(120px) rotateX(0deg) rotateY(0deg); //perspectiveは視点の設定, rotateXはX軸の回転, rotateYはY軸の回転
    }
    50% {
      transform: perspective(120px) rotateX(-180deg) rotateY(0deg);
    }
    100% {
      transform: perspective(120px) rotateX(-180deg) rotateY(-180deg);
    }
  }

  .double-spinner {
    width: 40px;
    height: 40px;
    position: relative; // 親要素を基準にした相対位置
    margin: 100px auto;

    & > div {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      background-color: black;
      opacity: 0.6;
      position: absolute; // 親要素を基準にした絶対位置
      top: 0;
      left: 0;

      @include animation(
        $name: sk-bounce-2,
        $duration: 2s,
        $iteration-count: infinite,
        $timing-function: ease-in-out
      );

      &:nth-child(2) {
        animation-delay: -1s; // アニメーションの遅延時間
      }

      @keyframes sk-bounce-2 {
        0%,
        100% {
          transform: scale(0); // 見えない状態
        }
        50% {
          transform: scale(1); // 見える状態
        }
      }
    }
  }

  .rect-spinner {
    width: 50px;
    height: 40px;
    text-align: center;
    letter-spacing: -2px;
    margin: 100px auto;

    & > div {
      background-color: black;
      height: 100%;
      width: 6px;
      display: inline-block;
      @include animation(
        $name: sk-stretchdelay-2,
        $duration: 1.2s,
        $iteration-count: infinite,
        $timing-function: ease-in-out
      );

      @for $i from 0 through 4 {
        &:nth-child(#{$i}) {
          animation-delay: -1.3s + $i * 0.1s;
        }
      }
    }
  }

  @keyframes sk-stretchdelay-2 {
    0%,
    40%,
    100% {
      transform: scaleY(0.4); // 縦方向に0.4倍
    }
    20% {
      transform: scaleY(1); // 縦方向に1倍
    }
  }
}
